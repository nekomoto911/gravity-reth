//! Pipeline execution layer extension

use alloy_primitives::B256;
use reth_chain_state::ExecutedBlock;
use reth_chainspec::{ChainSpec, EthereumHardforks};
use reth_evm::{
    execute::{
        BlockExecutionError, BlockExecutionInput, BlockExecutorProvider, BlockValidationError,
        Executor,
    },
    ConfigureEvmEnv, NextBlockEnvAttributes,
};
use reth_evm_ethereum::{execute::EthExecutorProvider, EthEvmConfig};
use reth_execution_types::{BlockExecutionOutput, ExecutionOutcome};
use reth_primitives::{
    constants::{BEACON_NONCE, EMPTY_WITHDRAWALS},
    proofs, Address, Block, BlockWithSenders, Header, Receipt, TransactionSigned, Withdrawals,
    EMPTY_OMMER_ROOT_HASH, U256,
};
use revm::{db::WrapDatabaseRef, DatabaseRef, State};
use std::{collections::HashMap, error::Error, sync::Arc};

use once_cell::sync::OnceCell;

use gravity_storage::GravityStorage;
use tokio::sync::{
    mpsc::{UnboundedReceiver, UnboundedSender},
    oneshot, Mutex,
};

use tracing::*;

#[derive(Debug, Clone, Copy)]
pub struct ExecutedBlockMeta {
    /// Which ordered block is used to execute the block
    pub block_id: B256,
    /// Block hash of the executed block
    pub block_hash: B256,
}

#[derive(Debug)]
pub struct OrderedBlock {
    /// BlockId of the parent block generated by Gravity SDK
    pub parent_id: B256,
    /// BlockId of the block generated by Gravity SDK
    pub id: B256,
    pub number: u64,
    pub timestamp: u64,
    pub coinbase: Address,
    pub prev_randao: B256,
    pub withdrawals: Withdrawals,
    /// Ordered transactions in the block
    pub transactions: Vec<TransactionSigned>,
    /// Senders of the transactions in the block
    pub senders: Vec<Address>,
}

#[derive(Debug)]
pub enum PipeExecLayerEvent {
    /// Make executed block canonical
    MakeCanonical(ExecutedBlock, oneshot::Sender<()>),
}

/// Owned by EL
#[derive(Debug)]
struct PipeExecService<Storage: GravityStorage> {
    /// Immutable part of the state
    core: Arc<Core<Storage>>,
    /// Receive ordered block from Coordinator
    ordered_block_rx: UnboundedReceiver<OrderedBlock>,
}

#[derive(Debug)]
struct Core<Storage: GravityStorage> {
    /// Send executed block hash to Coordinator
    executed_block_hash_tx: Arc<PipeBarrier<B256 /* block id */, B256 /* block hash */>>,
    /// Receive verified block hash from Coordinator
    verified_block_hash_rx: Mutex<UnboundedReceiver<ExecutedBlockMeta>>,
    storage: Storage,
    evm_config: EthEvmConfig,
    chain_spec: Arc<ChainSpec>,
    event_tx: std::sync::mpsc::Sender<PipeExecLayerEvent>,
    execute_block_barrier: PipeBarrier<u64 /* block number */, Header>,
    merklize_barrier: PipeBarrier<u64 /* block number */, ()>,
    make_canonical_barrier: PipeBarrier<u64 /* block number */, B256 /* block hash */>,
}

#[derive(Debug)]
struct PipeBarrier<K, V> {
    inner: Mutex<PipeBarrierInner<K, V>>,
}

impl<K, V> Default for PipeBarrier<K, V> {
    fn default() -> Self {
        Self {
            inner: Mutex::new(PipeBarrierInner {
                buffer: None,
                waiters: Vec::new(),
                closed: false,
            }),
        }
    }
}

#[derive(Debug)]
struct PipeBarrierInner<K, V> {
    buffer: Option<(K, V)>,
    waiters: Vec<(K, oneshot::Sender<()>)>,
    closed: bool,
}

impl<K: Eq + Clone, V> PipeBarrier<K, V> {
    fn new(key: K, val: V) -> Self {
        Self {
            inner: Mutex::new(PipeBarrierInner {
                buffer: Some((key, val)),
                waiters: Vec::new(),
                closed: false,
            }),
        }
    }

    /// Wait until the key is notified.
    /// Returns `None` if the barrier has been closed.
    async fn wait(&self, key: K) -> Option<V> {
        loop {
            let mut inner = self.inner.lock().await;
            if inner.closed {
                return None;
            }

            if let Some((k, _)) = inner.buffer.as_ref() {
                if *k == key {
                    return Some(inner.buffer.take().unwrap().1);
                }
            }

            let (tx, rx) = oneshot::channel();
            inner.waiters.push((key.clone(), tx));
            drop(inner);
            rx.await.unwrap();
        }
    }

    /// Notify the key with the value.
    /// Returns `None` if the barrier has been closed.
    async fn notify(&self, key: K, val: V) -> Option<()> {
        let mut inner = self.inner.lock().await;
        if inner.closed {
            return None;
        }

        assert!(inner.buffer.is_none());
        let waiter_to_notify = inner
            .waiters
            .iter()
            .position(|(k, _)| *k == key)
            .map(|i| inner.waiters.swap_remove(i).1);
        inner.buffer = Some((key, val));
        drop(inner);

        let _ = waiter_to_notify.map(|tx| tx.send(()));
        Some(())
    }

    async fn close(&self) {
        let mut inner = self.inner.lock().await;
        inner.closed = true;
        let waiters = std::mem::take(&mut inner.waiters);
        drop(inner);

        for (_, tx) in waiters {
            let _ = tx.send(());
        }
    }
}

impl<Storage: GravityStorage> PipeExecService<Storage> {
    async fn run(mut self, mut latest_block_number: u64) {
        loop {
            let ordered_block = match self.ordered_block_rx.recv().await {
                Some(ordered_block) => ordered_block,
                None => {
                    self.core.execute_block_barrier.close().await;
                    self.core.merklize_barrier.close().await;
                    self.core.make_canonical_barrier.close().await;
                    return;
                }
            };
            // TODO: read latest block id from storage
            // assert_eq!(ordered_block.parent_id, latest_block_id);
            // latest_block_id = ordered_block.id;
            assert_eq!(ordered_block.number, latest_block_number + 1);
            latest_block_number = ordered_block.number;

            let core = self.core.clone();
            tokio::spawn(async move {
                core.process(ordered_block).await;
            });
        }
    }
}

impl<Storage: GravityStorage> Core<Storage> {
    async fn process(&self, ordered_block: OrderedBlock) {
        let block_number = ordered_block.number;
        let block_id = ordered_block.id;
        debug!(target: "PipeExecService.process",
            id=?block_id,
            parent_id=?ordered_block.parent_id,
            number=?block_number,
            "new ordered block"
        );

        // Retrieve the parent block header to generate the necessary configs for
        // executing the current block
        let parent_block_header = self.execute_block_barrier.wait(block_number - 1).await.unwrap();
        let (mut block, outcome) = self.execute_ordered_block(ordered_block, &parent_block_header);
        self.storage.insert_bundle_state(block_number, &outcome.state);
        self.storage.insert_block_id(block_number, block_id);
        self.execute_block_barrier.notify(block_number, block.header.clone()).await.unwrap();

        let execution_outcome = self.calculate_roots(&mut block, outcome);

        // Merkling the state trie
        self.merklize_barrier.wait(block_number - 1).await.unwrap();
        let (state_root, hashed_state, trie_output) =
            self.storage.state_root_with_updates(block_number).unwrap();
        self.merklize_barrier.notify(block_number, ()).await.unwrap();
        debug!(target: "PipeExecService.process",
            block_number=?block_number,
            block_id=?block_id,
            state_root=?state_root,
            "state trie merklized"
        );
        block.header.state_root = state_root;

        let parent_hash = self.make_canonical_barrier.wait(block_number - 1).await.unwrap();
        block.header.parent_hash = parent_hash;

        // Seal the block
        let block = block.seal_slow();
        let block_hash = block.hash();
        debug!(target: "PipeExecService.process",
            block_number=?block_number,
            block_id=?block_id,
            block_hash=?block_hash,
            "block sealed"
        );

        // Commit the executed block hash to Coordinator
        self.verify_executed_block_hash(ExecutedBlockMeta { block_id, block_hash }).await.unwrap();
        debug!(target: "PipeExecService.process",
            block_number=?block_number,
            block_id=?block_id,
            block_hash=?block_hash,
            "block verified"
        );

        let senders = Arc::new(block.senders);
        let block = Arc::new(block.block);

        // Make the block canonical
        self.make_canonical(ExecutedBlock {
            block: block.clone(),
            senders: senders.clone(),
            execution_output: Arc::new(execution_outcome),
            hashed_state,
            trie: trie_output,
        })
        .await;
        self.storage.update_canonical(block_number, block_hash);

        {
            //let (block_id_, state) = self.storage.get_state_view(block_number).unwrap();
            //assert_eq!(block_id_, block_id);
            //let sender_with_nonce: HashMap<_, _> =
            //    senders.iter().zip(block.body.iter().map(|tx| tx.nonce())).collect();
            //for (sender, nonce) in sender_with_nonce.into_iter() {
            //    let info = state.basic_ref(*sender).unwrap().unwrap();
            //    assert_eq!(
            //        info.nonce,
            //        nonce + 1,
            //        "nonce mismatch sender={:?}\n{:?}",
            //        sender,
            //        state
            //    );
            //}
        }

        self.make_canonical_barrier.notify(block_number, block_hash).await;
    }

    /// Push executed block hash to Coordinator and wait for verification result from Coordinator.
    /// Returns `None` if the channel has been closed.
    async fn verify_executed_block_hash(&self, block_meta: ExecutedBlockMeta) -> Option<()> {
        self.executed_block_hash_tx.notify(block_meta.block_id, block_meta.block_hash).await?;
        let meta = self.verified_block_hash_rx.lock().await.recv().await?;
        assert_eq!(block_meta.block_id, meta.block_id);
        assert_eq!(block_meta.block_hash, meta.block_hash);
        Some(())
    }

    fn execute_ordered_block(
        &self,
        ordered_block: OrderedBlock,
        parent_header: &Header,
    ) -> (BlockWithSenders, BlockExecutionOutput<Receipt>) {
        debug!(target: "execute_ordered_block",
            id=?ordered_block.id,
            parent_id=?ordered_block.parent_id,
            number=?ordered_block.number,
            "ready to execute block"
        );

        let (_, block_env) = self.evm_config.next_cfg_and_block_env(
            parent_header,
            NextBlockEnvAttributes {
                timestamp: ordered_block.timestamp,
                suggested_fee_recipient: ordered_block.coinbase,
                prev_randao: ordered_block.prev_randao,
            },
        );

        let mut block = BlockWithSenders {
            block: Block {
                header: Header {
                    ommers_hash: EMPTY_OMMER_ROOT_HASH,
                    beneficiary: ordered_block.coinbase,
                    timestamp: ordered_block.timestamp,
                    mix_hash: ordered_block.prev_randao,
                    nonce: BEACON_NONCE,
                    base_fee_per_gas: Some(block_env.basefee.to::<u64>()),
                    number: ordered_block.number,
                    gas_limit: block_env
                        .gas_limit
                        .try_into()
                        .unwrap_or(self.chain_spec.max_gas_limit),
                    difficulty: U256::ZERO,
                    excess_blob_gas: block_env.blob_excess_gas_and_price.map(|v| v.excess_blob_gas),
                    ..Default::default()
                },
                body: ordered_block.transactions,
                ..Default::default()
            },
            senders: ordered_block.senders,
        };

        if self.chain_spec.is_shanghai_active_at_timestamp(block.timestamp) {
            if ordered_block.withdrawals.is_empty() {
                block.header.withdrawals_root = Some(EMPTY_WITHDRAWALS);
                block.withdrawals = Some(Withdrawals::default());
            } else {
                block.header.withdrawals_root =
                    Some(proofs::calculate_withdrawals_root(&ordered_block.withdrawals));
                block.withdrawals = Some(ordered_block.withdrawals);
            }
        }

        // only determine cancun fields when active
        if self.chain_spec.is_cancun_active_at_timestamp(block.timestamp) {
            // FIXME: Is it OK to use the parent's block id as `parent_beacon_block_root` before
            // execution?
            block.header.parent_beacon_block_root = Some(ordered_block.parent_id);
            let mut blob_gas_used: u64 = 0;
            for tx in &block.body {
                if let Some(blob_tx) = tx.transaction.as_eip4844() {
                    blob_gas_used += blob_tx.blob_gas();
                }
            }
            block.header.blob_gas_used = Some(blob_gas_used);
        }

        let (parent_id, state) = self.storage.get_state_view(block.number - 1).unwrap();
        let state = Arc::new(state);
        assert_eq!(parent_id, ordered_block.parent_id);
        let db = State::builder().with_database_ref(state.clone()).with_bundle_update().build();

        let executor_provider =
            EthExecutorProvider::new(self.chain_spec.clone(), self.evm_config.clone());
        let outcome = executor_provider
            .executor(db)
            .execute(BlockExecutionInput { block: &block, total_difficulty: block_env.difficulty })
            .unwrap_or_else(|err| {
                debug!(target: "execute_ordered_block", ?state, "block execution failed");
                panic!("failed to execute block {:?}: {:?}", ordered_block.id, err);
            });

        debug!(target: "execute_ordered_block",
            id=?ordered_block.id,
            parent_id=?ordered_block.parent_id,
            number=?ordered_block.number,
            state=?outcome.state.state(),
            "block executed"
        );

        block.header.gas_used = outcome.gas_used;
        (block, outcome)
    }

    /// Calculate the receipts root, logs bloom, and transactions root, etc. and fill them into the
    /// block header.
    fn calculate_roots(
        &self,
        block: &mut BlockWithSenders,
        execution_outcome: BlockExecutionOutput<Receipt>,
    ) -> ExecutionOutcome {
        // only determine cancun fields when active
        if self.chain_spec.is_prague_active_at_timestamp(block.timestamp) {
            block.requests = Some(execution_outcome.requests.clone().into());
            block.header.requests_root =
                Some(proofs::calculate_requests_root(&execution_outcome.requests));
        }

        let execution_outcome = ExecutionOutcome::new(
            execution_outcome.state,
            vec![execution_outcome.receipts.into_iter().map(|r| Some(r)).collect::<Vec<_>>()]
                .into(),
            block.number,
            vec![execution_outcome.requests.into()],
        );

        let receipts_root =
            execution_outcome.receipts_root_slow(block.number).expect("Number is in range");
        let logs_bloom =
            execution_outcome.block_logs_bloom(block.number).expect("Number is in range");

        let transactions_root = proofs::calculate_transaction_root(&block.body);

        // Fill the block header with the calculated values
        block.header.transactions_root = transactions_root;
        block.header.receipts_root = receipts_root;
        block.header.logs_bloom = logs_bloom;

        execution_outcome
    }

    async fn make_canonical(&self, executed_block: ExecutedBlock) {
        let block_number = executed_block.block.number;

        // Make executed block canonical
        let (tx, rx) = oneshot::channel();
        self.event_tx.send(PipeExecLayerEvent::MakeCanonical(executed_block, tx)).unwrap();
        rx.await.unwrap();

        debug!(target: "make_canonical", block_number=?block_number, "block made canonical");
    }
}

/// Called by Coordinator
#[derive(Debug)]
pub struct PipeExecLayerApi {
    ordered_block_tx: UnboundedSender<OrderedBlock>,
    executed_block_hash_rx: Arc<PipeBarrier<B256 /* block id */, B256 /* block hash */>>,
    verified_block_hash_tx: UnboundedSender<ExecutedBlockMeta>,
}

impl PipeExecLayerApi {
    /// Push ordered block to EL for execution.
    /// Returns `None` if the channel has been closed.
    pub fn push_ordered_block(&self, block: OrderedBlock) -> Option<()> {
        self.ordered_block_tx.send(block).ok()
    }

    /// Pull executed block hash from EL for verification.
    /// Returns `None` if the channel has been closed.
    pub async fn pull_executed_block_hash(&self, block_id: B256) -> Option<B256> {
        self.executed_block_hash_rx.wait(block_id).await
    }

    /// Push verified block hash to EL for commit.
    /// Returns `None` if the channel has been closed.
    pub fn commit_executed_block_hash(&self, block_meta: ExecutedBlockMeta) -> Option<()> {
        self.verified_block_hash_tx.send(block_meta).ok()
    }
}

/// Called by EL.
#[derive(Debug)]
pub struct PipeExecLayerExt {
    /// Receive events from PipeExecService
    pub event_rx: std::sync::Mutex<std::sync::mpsc::Receiver<PipeExecLayerEvent>>,
}

/// A static instance of `PipeExecLayerExt` used for dispatching events.
pub static PIPE_EXEC_LAYER_EXT: OnceCell<PipeExecLayerExt> = OnceCell::new();

/// Create a new `PipeExecLayerApi` instance and launch a `PipeExecService`.
pub fn new_pipe_exec_layer_api<Storage: GravityStorage>(
    chain_spec: Arc<ChainSpec>,
    storage: Storage,
    latest_block_header: Header,
    latest_block_hash: B256,
) -> PipeExecLayerApi {
    let (ordered_block_tx, ordered_block_rx) = tokio::sync::mpsc::unbounded_channel();
    let executed_block_hash_ch = Arc::new(PipeBarrier::default());
    let (verified_block_hash_tx, verified_block_hash_rx) = tokio::sync::mpsc::unbounded_channel();
    let (event_tx, event_rx) = std::sync::mpsc::channel();

    let latest_block_number = latest_block_header.number;
    let service = PipeExecService {
        core: Arc::new(Core {
            executed_block_hash_tx: executed_block_hash_ch.clone(),
            verified_block_hash_rx: Mutex::new(verified_block_hash_rx),
            storage,
            evm_config: EthEvmConfig::new(chain_spec.clone()),
            chain_spec,
            event_tx,
            execute_block_barrier: PipeBarrier::new(latest_block_number, latest_block_header),
            merklize_barrier: PipeBarrier::new(latest_block_number, ()),
            make_canonical_barrier: PipeBarrier::new(latest_block_number, latest_block_hash),
        }),
        ordered_block_rx,
    };
    tokio::spawn(service.run(latest_block_number));

    PIPE_EXEC_LAYER_EXT.get_or_init(|| PipeExecLayerExt { event_rx: event_rx.into() });

    PipeExecLayerApi {
        ordered_block_tx,
        executed_block_hash_rx: executed_block_hash_ch,
        verified_block_hash_tx,
    }
}

#[cfg(test)]
mod test {
    use rand::{thread_rng, Rng};
    use std::sync::Arc;
    use tokio::task::JoinSet;

    #[tokio::test]
    async fn test_pipe_barrier() {
        let barrier = Arc::new(super::PipeBarrier::new(0, 0));

        let mut tasks = JoinSet::new();
        for i in 1..10 {
            let barrier = barrier.clone();
            let sleep_ms = thread_rng().gen_range(100..1000);
            tasks.spawn(async move {
                let v = barrier.wait(i - 1).await;
                assert_eq!(v.unwrap(), i - 1);
                tokio::time::sleep(std::time::Duration::from_millis(sleep_ms)).await;
                let _ = barrier.notify(i, i).await;
            });
        }

        tasks.join_all().await;
    }
}
